name: Build ROM Database

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub release'
        type: boolean
        default: true
        required: false
      release_tag:
        description: 'Release tag (e.g., v1.0.0, leave empty for auto-generated)'
        type: string
        required: false
        default: ''
      prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: false
        required: false
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  push:
    tags:
      - 'v*'

env:
  DATABASE_NAME: ROMnibus.sqlite
  GO_VERSION: '1.24.1'

jobs:
  build:
    name: Build ROM Database
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: write

    outputs:
      database-size: ${{ steps.db-info.outputs.size }}
      release-tag: ${{ steps.release-info.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Verify Go installation
        run: go version

      - name: Download Go dependencies
        run: go mod download

      - name: Build ROM database
        run: go run db_generator.go
        env:
          GOWORK: off
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 20

      - name: Verify database creation
        id: db-info
        run: |
          if [[ ! -f "$DATABASE_NAME" ]]; then
            echo "❌ Database file not found!"
            exit 1
          fi
          
          # Get file size in human readable format
          SIZE=$(ls -lh "$DATABASE_NAME" | awk '{print $5}')
          echo "✅ Database created successfully"
          echo "📊 Database size: $SIZE"
          echo "size=$SIZE" >> $GITHUB_OUTPUT
          
          # Basic integrity check
          sqlite3 "$DATABASE_NAME" "SELECT COUNT(*) FROM games;" > /dev/null
          echo "✅ Database integrity check passed"

      - name: Compress database files
        run: |
          echo "🗜️ Compressing database files..."
          
          zip -9 "$DATABASE_NAME.zip" "$DATABASE_NAME"
          
          echo "📦 Compression results:"
          ls -lh "$DATABASE_NAME"*

      - name: Generate release information
        id: release-info
        if: github.event_name != 'push' || startsWith(github.ref, 'refs/tags/')
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ refs/tags/ ]]; then
            # Tagged release
            TAG="${{ github.ref_name }}"
            TITLE="Release $TAG"
          elif [[ -n "${{ inputs.release_tag }}" ]]; then
            # Manual release with custom tag
            TAG="${{ inputs.release_tag }}"
            TITLE="Release $TAG"
          else
            # Auto-generated release
            TAG="release-$(date +%Y%m%d-%H%M%S)"
            TITLE="ROM Database Release $(date +%Y-%m-%d)"
          fi
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          
          # Generate release notes
          cat > release_notes.md << EOF
          # ROM Database Release
          
          **Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
          **Database Size:** ${{ steps.db-info.outputs.size }}  
          **Workflow:** [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF

      - name: Create GitHub release
        if: (inputs.create_release || github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')) && steps.release-info.outputs.tag != ''
        run: |
          echo "🚀 Creating release: ${{ steps.release-info.outputs.tag }}"
          
          # Create release
          gh release create "${{ steps.release-info.outputs.tag }}" \
            --title "${{ steps.release-info.outputs.title }}" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=${{ inputs.prerelease || 'false' }} \
            || echo "⚠️ Release might already exist, continuing with upload..."
          
          # Upload all database formats
          echo "📤 Uploading database files..."
          gh release upload "${{ steps.release-info.outputs.tag }}" \
            "$DATABASE_NAME.zip" \
            --clobber
          
          echo "✅ Release created successfully!"
          echo "🔗 Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.release-info.outputs.tag }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
